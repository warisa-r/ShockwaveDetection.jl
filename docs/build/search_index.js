var documenterSearchIndex = {"docs":
[{"location":"#ShockDetection.jl","page":"Home","title":"ShockDetection.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ShockDetection.jl is a Julia package for detecting shocks in time series data from Godunov solver.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A method for shock detection.\nEasy-to-use functions for analyzing time series data.\nCompatible with Julia 1.9.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install ShockDetection.jl using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read_output_file\nconvert_to_primitive\ndetect_normal_shock\ncreate_wave_animation\ncreate_wave_animation_with_shock","category":"page"},{"location":"#ShockwaveDetection.read_output_file","page":"Home","title":"ShockwaveDetection.read_output_file","text":"read_output_file(filename)\n\nReads data from an output file.\n\nArguments\n\nfilename::String: The path to the output file.\n\nReturns\n\nx0_xmax::Vector{Float64}: A vector containing the first and last x values.\nt_values::Vector{Float64}: A vector containing the time values.\nu_values::Array{Float64, 3}: A 3D array containing the u values.\ndims_u::Vector{Int}: A vector containing the dimensions of the u values (Nu x Nx).\n\nThis function reads data from the specified output file generated from 1d_plots.jl that use Euler2D.jl to solve, which is assumed to have a specific format.  It reads the dimensions of the u values, the first and last x values, the number of time steps, the time values, and the u values themselves.  It reshapes the u values into a 3D array and returns all the read data.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.convert_to_primitive","page":"Home","title":"ShockwaveDetection.convert_to_primitive","text":"convert_to_primitive(u_values)\n\nConverts conserved state variables to primitive variables.\n\nArguments\n\nu_values::Array{Float64, 3}: A 3D array containing the conserved state variables (density, momentum, total energy) at each point x and time t.\n\nReturns\n\ndensity_field::Array{Float64, 2}: A 2D array containing the density field.\nvelocity_field::Array{Float64, 2}: A 2D array containing the velocity field.\npressure_field::Array{Float64, 2}: A 2D array containing the pressure field.\n\nEuler equations are typically represented in a \"conserved\" form, where the vector u contains (density, momentum, total energy) at each point x and time t. This function converts these conserved state variables to primitive variables (density, velocity, pressure).\n\nThe u_values parameter is a 3D array representing the conserved state variables at each point x and time t. This function iterates over each time step and calculates the primitive state vector for density, velocity, and pressure using appropriate transformations. The resulting primitive variables are stored in separate arrays density_field, velocity_field, and pressure_field, and returned.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.detect_normal_shock","page":"Home","title":"ShockwaveDetection.detect_normal_shock","text":"detect_normal_shock(density_field, velocity_field, pressure_field, x0_xmax, t_values; threshold=0.5)\n\nDetects shock positions over time based on given density, velocity, and pressure fields.\n\nArguments\n\nu_values::Array: Array containing the conserved state variables at each point x and time t.\ndensity_field::Matrix: Matrix representing the density field over space and time.\nvelocity_field::Matrix: Matrix representing the velocity field over space and time.\npressure_field::Matrix: Matrix representing the pressure field over space and time.\nx0_xmax::Tuple: Tuple containing the start and end positions of the spatial domain.\nt_values::Vector: Vector containing time values.\nthreshold::Float64: Threshold value for detecting shocks. Default is 0.5.\n\nReturns\n\nshock_positions_over_time::Vector: Vector containing shock positions at each time step.\n\nDetails\n\nThis function iterates over each time step and detects shock positions using the detect_shocks_at_timestep function.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.create_wave_animation","page":"Home","title":"ShockwaveDetection.create_wave_animation","text":"create_wave_animation(x0_xmax, t_values, density_field, velocity_field, pressure_field)\n\nCreate an animation of density, velocity, and pressure fields over time.\n\nArguments\n\nx0_xmax::Tuple{Float64, Float64}: A tuple containing the minimum and maximum x values.\nt_values::Array{Float64}: An array of time values.\ndensity_field::Array{Float64, 2}: A 2D array representing the density field. Each column represents the density at a different time.\nvelocity_field::Array{Float64, 2}: A 2D array representing the velocity field. Each column represents the velocity at a different time.\npressure_field::Array{Float64, 2}: A 2D array representing the pressure field. Each column represents the pressure at a different time.\n\nReturns\n\nThis function saves an animation as a gif file named \"densityvelocitypressureovertime.gif\" in the current directory and returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.create_wave_animation_with_shock","page":"Home","title":"ShockwaveDetection.create_wave_animation_with_shock","text":"create_wave_animation_with_shock(x, t_values, density_field, velocity_field, pressure_field, shock_positions_over_time; save_file=false)\n\nCreate an animation of density, velocity, and pressure fields over time, with markers for shock positions.\n\nArguments\n\nx0_xmax::Tuple{Float64, Float64}: A tuple containing the minimum and maximum x values.\nt_values::Vector: Time values.\ndensity_field::Matrix: Density field over space and time.\nvelocity_field::Matrix: Velocity field over space and time.\npressure_field::Matrix: Pressure field over space and time.\nshock_positions_over_time::Vector{Vector{Int}}: Shock positions over time.\nsave_file::Bool: Whether to save the animation as a gif file (default: false).\n\nReturns\n\nanim::Animation: Animation object.\n\nThis function creates an animation of density, velocity, and pressure fields over time, with markers indicating shock positions at each time step. The animation is generated using the Plots.jl package and returned as an Animation object. If save_file is true, the animation is saved as a gif file with the filename 'densityvelocitypressureovertimewithshock_positions.gif'.\n\n\n\n\n\n","category":"function"}]
}
