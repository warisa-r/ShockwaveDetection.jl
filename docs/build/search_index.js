var documenterSearchIndex = {"docs":
[{"location":"#ShockDetection.jl","page":"Home","title":"ShockDetection.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ShockDetection.jl is a Julia package for detecting shocks in time series data from Godunov solver. The packages can detect shock discontinuities for grid data with dimensions","category":"page"},{"location":"","page":"Home","title":"Home","text":"Nx x Nt when Nx are the number of grid points in x axis and Nt is the number of time steps in the simulation\nNx x Ny x Nt when Nx and Ny are the number of grid points in x and y axes respectively, and Nt is the number of time steps in the simulation","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package can only process simulation files that end with .tape and .celltape. Other simulation file types are not supported!","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Shock detection (1D and 2D): \nFor 1D data (Nx x Nt): Detects shocks based on gradients using the finite difference method. \nFor 2D data (Nx x Ny x Nt): Detects shocks based on gradients, clusters points using DBSCAN and fits optimal shock curves via the Levenbergâ€“Marquardt algorithm.\nVisualization: Generate shock visualizations, calculate normal vectors for 2D simulations with create_heatmap_evo_with_shock, or use calculate_normal_vector to compute vectors at specific time frames.\nCompatibility: Works with Julia 1.9 and 1.10.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install ShockDetection.jl using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode There are several dependencies needed to run this pacakge. Check out Project.toml to see what packages you need to have in order to run ShockwaveDetection.jl","category":"page"},{"location":"#Guide","page":"Home","title":"Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Go to our examples directory to see how to use our functions!","category":"page"},{"location":"#Short-guide-on-how-to-use-our-package-on-grid-data-with-dimension-Nx-x-Nt","page":"Home","title":"Short guide on how to use our package on grid data with dimension Nx x Nt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When you wish to use our package to detect shock discontinuities,  you should first input your data file path into FlowData. After that, define your algorithm of finite difference that best suited your simulation data and use the function detect to automate the detection process. The results of your detection can be found in ShockDetectionResult1D. You can further use various functions in visualization to see the result.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:\n```julia\nflow_data = FlowData(\"examples/data/supersonic_shock_2.tape\")\ndetection_algo = GradientShockDetectionAlgo(threshold=0.5)\nresult = detect(flow_data, detection_algo)","category":"page"},{"location":"#Short-guide-on-how-to-use-our-package-on-grid-data-with-dimension-Nx-x-Ny-x-Nt","page":"Home","title":"Short guide on how to use our package on grid data with dimension Nx x Ny x Nt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When you wish to use our package to detect shock discontinuities,  you should first input your data file path into FlowData. After that, define your algorithm of finite difference, clustering, and fitting that best suited your simulation data and use the function detect to automate the detection process. The results of your detection can be found in ShockDetectionResult2D. You can further use various functions in visualization to see the result.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:\n```julia\nflow_data = FlowData(\"examples/data/sod_shock_right_2d.tape\", false)\ndetection_algo = ImageProcessingShockDetectionAlgo(0.5, :prewitt)\nfitting_algo = FittingAlgo(0.1, true)\ndbscan_algo = DBSCANAlgo(0.25, 3, 10)\nresult = detect(flow_data, detection_algo, dbscan_algo, fitting_algo)","category":"page"},{"location":"#Functions-and-structs","page":"Home","title":"Functions and structs","text":"","category":"section"},{"location":"#Main-functions-and-structs-of-our-package","page":"Home","title":"Main functions and structs of our package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These are the most important functions and structs in our package. Others are functions/structs called/used/stored by detect/ ShockDetectionResult1D and ShockDetectionResult2D to perform shock detections but they still exist in this documentation to clarify to you how our algorithm works!","category":"page"},{"location":"","page":"Home","title":"Home","text":"detect\nShockDetectionResult1D\nShockDetectionResult2D","category":"page"},{"location":"#ShockwaveDetection.detect","page":"Home","title":"ShockwaveDetection.detect","text":"detect(flow_data::FlowData, shock_point_algo::Abstract2DShockDetectionAlgo, cluster_algo::DBSCANAlgo, fitting_algo::FittingAlgo)\n\nDetects shocks in 2D flow data, clusters the shockpoints and applies fitting to the cluster. It also shows the runtime and memory allocations required in each subprocess\n\nArguments\n\nflow_data::FlowData: A FlowData object containing the 2D flow field data.\nshock_point_algo::Abstract2DShockDetectionAlgo: An algorithm for detecting shock points in 2D flow data.\ncluster_algo::DBSCANAlgo: A clustering algorithm (e.g., DBSCAN) to group detected shock points into clusters.\nfitting_algo::FittingAlgo: An algorithm for fitting shock clusters to create a smooth representation of the shock over time.\n\nReturns\n\nShockDetectionResult2D: An object containing:\nshock_positions_over_time: Detected shock points over time.\nshock_clusters_over_time: Clusters of shock points over time.\nshock_fits_over_time: Fitted shock curves over time.\n\nDescription\n\nThis function detects shock points in 2D flow data using a specified shock detection algorithm. Detected shock points are clustered using the provided DBSCANAlgo, and then the clusters are fitted to create a smooth representation of the shock over time.\n\n\n\n\n\ndetect(flow_data::FlowData, shock_point_algo::Abstract1DShockDetectionAlgo)\n\nDetects shocks in 1D flow data and show the runtime and memory allocations required in each subprocess.\n\nArguments\n\nflow_data::FlowData: A FlowData object containing the 1D flow field data.\nshock_point_algo::Abstract1DShockDetectionAlgo: An algorithm for detecting shock points in 1D flow data.\n\nReturns\n\nShockDetectionResult1D: An object containing:\nshock_positions_over_time: Detected shock points over time.\n\nDescription\n\nThis function detects shock points in 1D flow data using a specified shock detection algorithm. \n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.ShockDetectionResult1D","page":"Home","title":"ShockwaveDetection.ShockDetectionResult1D","text":"struct ShockDetectionResult1D <: AbstractShockDetectionResult\n\nA structure to hold the results of 1D shock detection.\n\nFields\n\nshock_positions_over_time::Vector{Any}: A vector of the CartesianIndices of shock points detected in every time frame.\n\nDescription\n\nThis structure is used to store the results of shock detection in 1D flow data. It contains the detected shock points over time.\n\n\n\n\n\n","category":"type"},{"location":"#ShockwaveDetection.ShockDetectionResult2D","page":"Home","title":"ShockwaveDetection.ShockDetectionResult2D","text":"struct ShockDetectionResult2D <: AbstractShockDetectionResult\n\nA structure to hold the results of 2D shock detection.\n\nFields\n\nshock_positions_over_time::Vector{Any}: A vector of the CartesianIndices of shock points detected in every time frame.\nshock_clusters_over_time::Vector{Any}: A vector of groups of clustered shock points detected in every time frame.\nshock_fits_over_time::Vector{Any}: Fitted shock curves over time. In each time frame is a vector of objects Fitting\n\nDescription\n\nThis structure is used to store the results of shock detection in 2D flow data. It contains the detected shock points, clusters of shock points, and fitted shock curves over time.\n\n\n\n\n\n","category":"type"},{"location":"#Input-related-structs-and-functions","page":"Home","title":"Input-related structs and functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"convert_to_primitive\nFlowData","category":"page"},{"location":"#ShockwaveDetection.convert_to_primitive","page":"Home","title":"ShockwaveDetection.convert_to_primitive","text":"convert_to_primitive(u_values)\n\nConverts conserved state variables to primitive variables.\n\nArguments\n\nu_values::Array{Float64, 3}: A 3D array containing the conserved state variables (density, momentum, total energy) at each point x and time t.\n\nReturns\n\ndensity_field::Array{Float64, 2}: A 2D array containing the density field.\nvelocity_field::Array{Float64, 2}: A 2D array containing the velocity field.\npressure_field::Array{Float64, 2}: A 2D array containing the pressure field.\n\nEuler equations are typically represented in a \"conserved\" form, where the vector u contains (density, momentum, total energy) at each point x and time t. This function converts these conserved state variables to primitive variables (density, velocity, pressure).\n\nThe u_values parameter is a 3D array representing the conserved state variables at each point x and time t. This function iterates over each time step and calculates the primitive state vector for density, velocity, and pressure using appropriate transformations. The resulting primitive variables are stored in separate arrays density_field, velocity_field, and pressure_field, and returned.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.FlowData","page":"Home","title":"ShockwaveDetection.FlowData","text":"struct FlowData{N, T}\n\nA structure to hold flow data for simulations.\n\nFields\n\nncells::NTuple{N, Int}: Number of cells in each dimension.\nnsteps::Int: Number of time steps in the simulation.\nbounds::NTuple{N, Tuple{T, T}}: Bounds of the simulation domain in each dimension.\ntsteps::Vector{T}: Time steps of the simulation.\nu::Union{Array{T}, Nothing}: Array of primitive variables or Nothing for .celltape data.\ndensity_field::Array{T}: Density field of the simulation.\nvelocity_field::Array{T}: Velocity field of the simulation.\npressure_field::Array{T}: Pressure field of the simulation.\nmach_to_m_s::Bool: Flag indicating if Mach number should be converted to meters per second.\ncell_ids::Union{Matrix{Int64}, Nothing}: Cell IDs for .celltape data. Nothing for .tape data.\n\n\n\n\n\n","category":"type"},{"location":"#Finite-difference-related-functions-and-structs","page":"Home","title":"Finite difference-related functions and structs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ImageProcessingShockDetectionAlgo\nGradientShockDetectionAlgo","category":"page"},{"location":"#ShockwaveDetection.ImageProcessingShockDetectionAlgo","page":"Home","title":"ShockwaveDetection.ImageProcessingShockDetectionAlgo","text":"struct ImageProcessingShockDetectionAlgo{T} <: Abstract2DShockDetectionAlgo\n\nA structure that represents the image processing shock detection algorithm.\n\nFields\n\nthreshold::T: The threshold value for detecting shocks.\nkernelname::Symbol: The name of the kernel to be used for image processing (e.g., :sobel, :prewitt).\n\nDescription\n\nThis struct is used to configure the image processing shock detection algorithm. The algorithm uses a specified kernel to process the image and detect shocks based on the provided threshold value.\n\nExample\n\nalgo = ImageProcessingShockDetectionAlgo(threshold=0.5, kernelname=:sobel)\n\n\n\n\n\n","category":"type"},{"location":"#ShockwaveDetection.GradientShockDetectionAlgo","page":"Home","title":"ShockwaveDetection.GradientShockDetectionAlgo","text":"struct GradientShockDetectionAlgo{T} <: Abstract1DShockDetectionAlgo\n\nA structure that represents the gradient-based shock detection algorithm for 1D data.\n\nFields\n\nthreshold::T: The threshold value for detecting shocks based on the gradient magnitude.\n\nDescription\n\nThis struct is used to configure the gradient-based shock detection algorithm in 1D simulations. The algorithm detects shocks by computing the gradient of the flow variables (e.g., density, pressure, velocity) and identifying regions where the gradient exceeds the specified threshold value.\n\nExample\n\nalgo = GradientShockDetectionAlgo(threshold=0.2)\n\n\n\n\n\n","category":"type"},{"location":"#Cluster-related-functions-and-structs","page":"Home","title":"Cluster-related functions and structs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"cartesian_index_to_xy\ncluster_shock_points\nDBSCANAlgo","category":"page"},{"location":"#ShockwaveDetection.cartesian_index_to_xy","page":"Home","title":"ShockwaveDetection.cartesian_index_to_xy","text":"cartesian_index_to_xy(shock_positions_t, x, y) -> Matrix\n\nConverts Cartesian indices of shock positions into their corresponding x and y coordinates.\n\nArguments\n\nshock_positions_t: An array of CartesianIndex indicating the positions of shocks.\nx: An array representing the x-coordinates in the domain.\ny: An array representing the y-coordinates in the domain.\n\nReturns\n\nMatrix: A 2xN matrix where the first row contains the x-coordinates and the second row contains the y-coordinates of the shock positions. The type of the elements in the matrix matches the type of elements in x and y.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.cluster_shock_points","page":"Home","title":"ShockwaveDetection.cluster_shock_points","text":"cluster_shock_points(dbscan_algo::DBSCANAlgo, shock_positions_over_time, flow_data)\n\nA part of the 2D detection algorithm of function detect. This function clusters shock points over time using the DBSCAN algorithm.\n\nArguments\n\ndbscan_algo::DBSCANAlgo: An instance of the DBSCAN clustering algorithm.\nshock_positions_over_time: A vector containing shock positions for each time step.\nflow_data: A FlowData object containing the flow field data.\n\nReturns\n\nshock_clusters_over_time: A vector containing clustered shock points for each time step.\n\nDescription\n\nThis function clusters shock points over time using the DBSCAN algorithm. It iterates over each time step, converts shock positions to Cartesian coordinates, and applies the DBSCAN algorithm to cluster the shock points. The clustered shock points are stored in a vector, with each element corresponding to a time step.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.DBSCANAlgo","page":"Home","title":"ShockwaveDetection.DBSCANAlgo","text":"struct DBSCANAlgo{T}\n\nA structure that keeps all the necessary parameters for the DBSCAN clustering algorithm.\n\nFields\n\nradius::T: The radius within which to search for neighboring points.\nmin_neighbors::Int: The minimum number of neighbors required to form a dense region.\nmin_cluster_size::Int: The minimum number of points required to form a cluster.\n\nConstructors\n\nDBSCANAlgo(radius::Float64 = 0.5, min_neighbors::Int = 3, min_cluster_size::Int = 10):  Creates a new DBSCANAlgo instance with the specified parameters. Default values are provided for all parameters.\n\nExample\n\nalgo = DBSCANAlgo(radius=1.0, minneighbors=5, mincluster_size=15)\n\n\n\n\n\n","category":"type"},{"location":"#Fitting-related-functions-and-structs","page":"Home","title":"Fitting-related functions and structs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FittingAlgo\nfit_shock_clusters_over_time\ncalculate_normal_vector","category":"page"},{"location":"#ShockwaveDetection.FittingAlgo","page":"Home","title":"ShockwaveDetection.FittingAlgo","text":"struct FittingAlgo{T}\n\nA structure that represents the fitting algorithm configuration.\n\nFields\n\nangle_tolerance::T: The tolerance value for checking the closeness of angles.\nuse_initial_guess::Bool: A flag indicating whether to use an initial guess for the fitting algorithm.\n\nConstructors\n\nFittingAlgo(angle_tolerance::T = convert(T, 0.1), use_initial_guess::Bool = false):  Creates a new FittingAlgo instance with the specified parameters. The default value for angle_tolerance is 0.1, and the default value for use_initial_guess is false.\n\nExample\n\n```julia algo = FittingAlgo(0.05, true)\n\n\n\n\n\n","category":"type"},{"location":"#ShockwaveDetection.fit_shock_clusters_over_time","page":"Home","title":"ShockwaveDetection.fit_shock_clusters_over_time","text":"fit_shock_clusters_over_time(shock_clusters_over_time, FittingAlgo)\n\nA part of the 2D pipeline of detect. In each time frame which is stored in the array shock_clusters_over_time, this function fits the shock clusters to existing models of parametized curves using the fit_shock_clusters function.  The fitted shock clusters are stored in the array shock_fits_over_time.\n\nArguments\n\nshock_clusters_over_time: An array of shock clusters over time.\nFittingAlgo: An algorithm for fitting shock clusters to create a smooth representation of the shock over time.\n\nReturns\n\nshock_fits_over_time: An array of fitted shock clusters over time.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.calculate_normal_vector","page":"Home","title":"ShockwaveDetection.calculate_normal_vector","text":"calculate_normal_vector(fit::Fitting, evenly_spaced_range, flow_data, t)\n\nCalculate the normal vector to a fitted line model at a specific time step in the flow data.\n\nArguments\n\nfit::Fitting: The fitting object containing the model and parameters of the fitted line.\nevenly_spaced_range: A range of evenly spaced points along the x-axis.\nflow_data: The flow data object containing the density field, number of cells, and bounds.\nt: The specific time step at which to calculate the normal vector.\n\nReturns\n\nnormal_quantity_x: The x-component of the normal vector.\nnormal_quantity_y: The y-component of the normal vector.\nindex_of_mid_x: The index of the midpoint in the x-direction.\nindex_of_mid_y: The index of the midpoint in the y-direction.\ncoordinate_movement_x: The movement in the x-direction based on the slope.\ncoordinate_movement_y: The movement in the y-direction based on the slope.\n\nDescription\n\nThis function calculates the normal vector to a fitted line model at a specific time step in the flow data. It first extracts the density field at the given time step and retrieves the number of cells and bounds from the flow data. If the model is a line model, it calculates the slope (m) and intercept (b) from the fit parameters. The magnitude of the normal vector is computed, and the x and y components of the normal vector are determined. The function then finds the midpoint of the line and its corresponding indices in the x and y directions. Finally, it calculates the coordinate movements based on the slope. This function is called within the create_heatmap_evo_with_shock function to calculate the normal vectors for the fitted shock models.\n\n\n\n\n\n","category":"function"},{"location":"#Visualization-functions","page":"Home","title":"Visualization functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"create_heatmap_evo_with_shock\ncreate_wave_animation\ncreate_wave_animation_with_shock\nplot_shock_fits_over_time","category":"page"},{"location":"#ShockwaveDetection.create_heatmap_evo_with_shock","page":"Home","title":"ShockwaveDetection.create_heatmap_evo_with_shock","text":"create_heatmap_evo_with_shock(flow_data, detection, field::Symbol = :density_field, show_curve = true, show_normal_vector = true; T=Float64)\n\nCreate a heatmap evolution plot with shock detection for 1D or 2D flow data.\n\nArguments\n\nflow_data: A FlowData object containing the flow field data.\ndetection: A detection object containing shock detection results.\nfield::Symbol: The field to visualize. Default is :density_field.\nshow_curve::Bool: Whether to show the shock curve in the plot. Default is true.\nshow_normal_vector::Bool: Whether to show the normal vector in the plot. Default is true.\nT: The data type of the flow field. Default is Float64.\n\nDescription\n\nThis function creates a heatmap evolution plot with shock detection for either 1D or 2D flow data. It determines the dimensionality of the flow data and calls the appropriate helper function to generate the plot.\n\nFor 1D flow data (Array{T, 3}), it calls create_heatmap_evo_with_shock_1D.\nFor 2D flow data (Array{T, 4}) or from flow data of .celltape files with obstacles, it calls create_heatmap_evo_with_shock_2D.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.create_wave_animation","page":"Home","title":"ShockwaveDetection.create_wave_animation","text":"create_wave_animation(flow_data::FlowData)\n\nCreate an animation of density, velocity, and pressure fields over time from properties of the flow.\n\nArguments\n\nflow_data::FlowData: A struct containing the flow data of x values, time steps, density field, velocity field, and pressure field.\n\nReturns\n\nThis function saves an animation as a gif file named \"densityvelocitypressureovertime.gif\" in the current directory and returns the animated object.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.create_wave_animation_with_shock","page":"Home","title":"ShockwaveDetection.create_wave_animation_with_shock","text":"create_wave_animation_with_shock(flow_data::FlowData, shock_positions_over_time)\n\nCreate an animation of density, velocity, and pressure fields over time from properties of the flow with shock wave positions.\n\nArguments\n\nflow_data::FlowData: A struct containing the flow data of x values, time steps, density field, velocity field, and pressure field.\nshock_positions_over_time::Vector{Vector{Int}}: A vector of vectors containing the shock positions over time from the detection algorithm.\n\nReturns\n\nThis function saves an animation as a gif file named \"densityvelocitypressureovertimewithshock_positions.gif\" in the current directory \n\nand returns the animated object.\n\n\n\n\n\n","category":"function"},{"location":"#ShockwaveDetection.plot_shock_fits_over_time","page":"Home","title":"ShockwaveDetection.plot_shock_fits_over_time","text":"plot_shock_fits_over_time(flow_data, detection, show_normal_vector = false; T=Float64)\n\nPlot the shock fits over time for a given flow data and detection results. This differs from other visualization function in that it shows the shock fits and doesn't save it as gif file.\n\nArguments\n\nflow_data: The flow data containing information about the flow field.\ndetection: An object containing the shock detection results, including shock clusters and fits over time.\nshow_normal_vector: A boolean flag indicating whether to show the normal vector for each shock fit. Defaults to false.\nT: The type of the elements in the flow data's velocity field. Defaults to Float64.\n\n\n\n\n\n","category":"function"}]
}
